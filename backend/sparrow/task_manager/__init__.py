"""
Sparrow's task manager provides a way to run long-running processes
(e.g., imports), within the context of a Sparrow application.

Tasks have

- Unique names
- Autogenerated command-line applications (if desired)
- Celery task representation
- Optional stdout redirection

"""
from click import echo
from sparrow.plugins import SparrowCorePlugin
from celery import Task, Celery
from sparrow.context import get_sparrow_app


class SparrowTaskError(Exception):
    ...


class SparrowTaskManager(SparrowCorePlugin):
    name = "task-manager"
    celery: Celery

    def __init__(self):
        self.celery = Celery("tasks", broker="redis://broker//")

    def __call__(self, fn):
        pass


class SparrowTask(Task):
    def __call__(self, *args, **kwargs):
        """In celery task this function call the run method, here you can
        set some environment variable before the run of the task"""
        return self.run(*args, **kwargs)

    def after_return(self, status, retval, task_id, args, kwargs, einfo):
        # exit point of the task whatever is the state
        pass


def sparrow_task(self, *args, **kwargs):
    kwargs.setdefault("base", SparrowTask)

    def wrapper(func):
        app = get_sparrow_app()
        mgr = app.plugins.get("task-manager")
        if mgr is None:
            raise SparrowTaskError("Cannot find task manager")

        @mgr.celery.task(*args, **kwargs)
        def inner(*_args, **_kwargs):
            func(*_args, **_kwargs)

        return inner

    return wrapper


@sparrow_task
def hello_task(name: str):
    echo("Hello world")
